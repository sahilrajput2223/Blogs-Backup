{"posts":[{"reward":{"type":"xlm"},"sourcedFromGithub":false,"isAnonymous":false,"views":78,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1620741123252/aLCz3Fby-.jpeg","autoGeneratedCover":"","brief":"Hello World !\nAlmost all developer now using Version Control  to manage there source code.\n\nVersion control, also known as source control, is the practice of tracking and managing changes to software code.\n\nBenefits of using version control\n\nit manag...","content":"<p>Hello World !</p>\n<p>Almost all developer now using <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Version_control\">Version Control</a>  to manage there source code.</p>\n<blockquote>\n<p>Version control, also known as source control, is the practice of tracking and managing changes to software code.</p>\n</blockquote>\n<h3 id=\"benefits-of-using-version-control\">Benefits of using version control</h3>\n<ul>\n<li><p>it manages a collection of changing and improving files.</p>\n</li>\n<li><p>complete history of project is tracked and available at any time.</p>\n</li>\n<li><p>helpful to collaborate in same project for all team members.</p>\n</li>\n<li><p>we can also easily test, fix or undo ideas and changes.</p>\n</li>\n</ul>\n<p>To get started with version control, you need to download and install git in your system. you can download git from  <a target=\"_blank\" href=\"https://git-scm.com/\">this link</a>.</p>\n<h3 id=\"git\">Git</h3>\n<p>Git is  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Distributed_version_control\">Distributed Version Control System</a> .</p>\n<blockquote>\n<p>Distributed Version Control System is a type of version control where the complete source code (codebase) including its full version history is available on every developer's computer.</p>\n</blockquote>\n<h4 id=\"there-is-mainly-three-characteristics-of-dvcsdistributed-version-control-system\">There is mainly three characteristics of DVCS(Distributed Version Control System)</h4>\n<ol>\n<li>Each user has a local project history (repository).</li>\n<li>User can work offline. </li>\n<li>Can easily synchronize repository. </li>\n</ol>\n<h4 id=\"before-getting-started-with-git-there-is-some-terminologies-that-we-need-to-understand\">Before getting started with git, there is some terminologies that we need to understand.</h4>\n<ul>\n<li><p><strong>Repository(Repo)</strong> : A repository is a directory which contains your project work, as well as a few files which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer.</p>\n</li>\n<li><p><strong>Local repository</strong> : Local repository contains all of the commits that have been made for the projects in offline.</p>\n</li>\n<li><p><strong>Remote repository</strong> : Remote repository usually located in a data center or cloud. This repo also contains all the commits of the project but in case of remote repo, commits are in online mode. This repo considered as a source of truth or official state of project. </p>\n</li>\n<li><p><strong>Commits</strong> : A repository is made from commits. During commit, we save our project files or codes on particular moments and push to the repo. It's like checkpoint in gaming, which we can visit any time. Also, commits represents the version history of the project.</p>\n</li>\n<li><p><strong>Working Directory</strong> : The Working Directory is the files that we see in our computer's file system.</p>\n</li>\n<li><p><strong>Staging area/index</strong> : files that are planned for next commit.</p>\n</li>\n<li><p><strong>Checkout</strong> : A checkout is when content in the repository has been copied to the Working Directory according to branch.</p>\n</li>\n<li><p><strong>Branch</strong> : It's a new line of development, which is completely separate from main line of development.</p>\n</li>\n</ul>\n<p>This are some basic terms we should know before getting started with git.</p>\n<p>Once, you download git and installed in your system you can open git bash terminal (which shows in below image)</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620706500013/rf4LpRcu4.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, to use git we are going to use some commands. Which is helpful to configure git details, also maintaining repos, creating commits, push and pull source code etc.</p>\n<p><strong>git --version</strong> : we can use this command to verify git version. for ex: <code>git --version</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620711177322/awQ_O4rWT.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git help cmd</strong> : we can use this command to get help for particular command in our default browser. for ex: <code>git help push</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620711275558/z3UcLsbi4.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git cmd -h</strong> : we can use this command to get help for particular command in cmd (terminal). for ex: <code>git  push -h</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620711353595/djvi_BNMz.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git config --global user.name \"YOUR NAME\"</strong> : we can use this command to set default global username in our system which is going to display as author username in every commit. for ex: <code>git config --global user.name \"Sahil Rajput\"</code> </p>\n<p><strong>git config --global user.email \"YOUR EMAIL\"</strong> : we can use this command to set default global email in our system which is going to display as author email in every commit. for ex: <code>git config --global user.email \"rajputsahil.2204@gmail.com\"</code>    </p>\n<p><strong>git config user.name</strong> : we can use this command to see username for our system. for ex: <code>git config user.name</code> </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620711487615/gL5TIz6sk.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git config user.email</strong> : we can use this command to see email for our system. for ex: <code>git config user.email</code> </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620711638876/FucRBuvOj.png\" alt=\"Capture.PNG\" /></p>\n<h4 id=\"now-lets-get-started-with-one-example-and-learn-about-some-more-commands-in-git\">Now, let's get started with one example and learn about some more commands in git.</h4>\n<p>For this example, I'm going to use one of my git repo Located on  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223/git-test\">this link</a>. </p>\n<p><strong>Note:</strong> If you don't have GitHub account, then you can create from  <a target=\"_blank\" href=\"http://github.com/\">this link</a> .</p>\n<h3 id=\"git-clone\"><strong>git clone</strong></h3>\n<p>Using this command we can clone (make copy) of our remote repo in our system as a local repo.\n   for ex: <code>git clone https://github.com/sahilrajput2223/git-test.git</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620710978374/4xQ49XwBC.png\" alt=\"Capture.PNG\" /></p>\n<p>We can get clone URL from remote repo as shown in above image.</p>\n<p>To clone remote repo into our system, we are going to use git clone command as shown in below image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620712124863/lpr12Rvhw.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, you can check that whole working tree (file structure) for that remote repo is created in your system. </p>\n<p>Now, let's create one basic notepad file named <code>HelloWorld.txt</code> and add that file in that local repo.</p>\n<h3 id=\"git-status\"><strong>git status</strong></h3>\n<p>Once, the file is created and added in local repo(working tree) we can use git status command to check the status of our repo files.</p>\n<ul>\n<li>if we create new files and add it in working tree, then we can see the status of that files as a <code>untracked files</code> as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620712644195/jJkBnizbn.png\" alt=\"c.PNG\" /></p>\n<ul>\n<li>if we delete files from working tree, then we can see the status of that files as <code>deleted</code> as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620712786617/wyTnRES5V.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>if we added our new file in staging area, than we can see the status of that files as <code>new file</code> as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620712934497/9MfV94BCJ.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>if we modify our file which is already added in staging area, then we can see the status of that files as <code>modified</code> as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620713165880/xjeDr31VX.png\" alt=\"Capture.PNG\" /></p>\n<p>Also we can use <code>git status</code> command as a <code>git status -s</code>. which shows us the result in short form.</p>\n<h3 id=\"git-add\"><strong>git add</strong></h3>\n<p>This command is used to add files and folders in staging area from working tree. We can use this command as <code>git add &lt;folder/file name&gt;</code> or <code>git add .</code>. </p>\n<p><strong>git add folder/file_name</strong> : this is useful when we want to add particular file/folder in staging area. we can use this command as shown in below image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620713456552/LjSBd9nFf.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git add .</strong> : this is useful when we want to add all the files/folders in staging area. we can use this command as shown in below image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620713587812/tvNpqzizw.png\" alt=\"Capture.PNG\" /></p>\n<p>Files and folders which are added in staging area/index is going to be add in our next commit.</p>\n<h3 id=\"git-commit\"><strong>git commit</strong></h3>\n<p>We can use this command to add all the files/folders from staging area to local repo as a commit.</p>\n<p>This command is used as <code>git commit -m \"COMMIT MESSAGE\"</code></p>\n<p>here, <code>-m</code> flag is used to add commit massage. If we don't use this flag then default IDE will open and we need to add commit message over there. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620714357923/rpJZWxuuR.png\" alt=\"Capture.PNG\" /></p>\n<p>As shown in above image, we can commit our <code>HelloWorld.txt</code> file to local repo and commit message for this commit is <code>HelloWorld File added</code>.</p>\n<h3 id=\"git-push\"><strong>git push</strong></h3>\n<p>We can use this command to commits from local repository to remote repository.</p>\n<p>This command is used as <code>git push &lt;repo&gt; &lt;branch name&gt;</code> as shown in below image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620715322850/V86gsS5IW.png\" alt=\"Capture.PNG\" /></p>\n<p>here, origin is used to store remote repo URL and branch name can be anything that we have created or by default branch name (master/main).</p>\n<h3 id=\"git-remote\"><strong>git remote</strong></h3>\n<p>We can use this command to get information of remote repo.</p>\n<p>This command is used as <code>git remote</code> or <code>git remote -v</code>.</p>\n<p><strong>git remote</strong> : with the help of this command, we can see the shorthand name for the remote repository that a project was originally cloned from.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620716033130/chtLGYHU_.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>git remote -v</strong> : with the help of this command, we can see the shorthand name for the remote repository with original remote repo clone URL.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620716277234/8UD1vwej_.png\" alt=\"Capture.PNG\" /></p>\n<h3 id=\"git-pull\"><strong>git pull</strong></h3>\n<p>We can use this command to pull all remote repo content into local repo.</p>\n<p>Whenever multiple contributors pushing content on remote repo then we need to pull all that content in local repo. So our local repo and remote repo is work in synchronized manner.</p>\n<ul>\n<li>if there is no new commit in remote repo and our local repo is synchronized with remote repo then we can see the output as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620716704525/D3e0ZRqZh.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>if there is some new commit in remote repo and our local repo is not synchronized with remote repo then we can see the output as shown in below image.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620716901577/nKIGB5W7i.png\" alt=\"Capture.PNG\" /></p>\n<h3 id=\"git-branch\"><strong>git branch</strong></h3>\n<p>We can use this command to view all branch which is available in our repo. Also currently active branch noted with <code>*</code> sign.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620720012530/wsDAv24Uj.png\" alt=\"Capture.PNG\" /></p>\n<p>Right now, there is only one branch(master) available in this repo.</p>\n<p>We can use this command as <code>git branch &lt;BRANCH NAME&gt;</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620720247553/o7wM8th1i.png\" alt=\"Capture.PNG\" /></p>\n<p>As mentioned in above image, we have created new branch called <code>development</code>. We can check that by displaying all branches in repo.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620720370562/JXJrlSniQ.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, in above image you can see there is two branch available <code>master</code> and <code>development</code>. Also you can see that master branch is noted with <code>*</code>, because master branch is active branch.</p>\n<h3 id=\"git-checkout-lessbranch-namegreater\"><strong>git checkout </strong></h3>\n<p>We can use this command to change our active branch. Once we will change our active branch, according to that branch our working tree content is also updated.</p>\n<p>Remember, we have created <code>development</code> branch, let's make that branch as our active branch.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620720753485/C7R_9eSsQ.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, If we use <code>git branch</code> then we can see that our active branch is <code>development</code> and <code>*</code> is moved to development branch. you can see this in below mention image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620721063606/x5tfFXxQ9.png\" alt=\"Capture.PNG\" /></p>\n<p>We can also use this command as <code>git checkout -b &lt;BRANCH NAME&gt;</code>, you can see this in below mention image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620721201263/aQaTClJWI.png\" alt=\"Capture.PNG\" /></p>\n<p>here, <code>-b</code> flag is used to create new branch and because of this using only this one command <code>git checkout -b &lt;BRANCH NAME&gt;</code> we can create new branch and immediately make it as a active branch. Using this we have <code>created testing branch and make it as active branch</code>. </p>\n<h3 id=\"git-log\"><strong>git log</strong></h3>\n<p>We can use this command to see commit log history.</p>\n<p>We can use this command as <code>git log</code>, <code>git log --oneline</code>, <code>git log -n</code> and <code>git log --oneline -n</code>.</p>\n<ul>\n<li>If we use as <code>git log</code> then, as shown in below image we can see all commit logs with all details.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620738292735/y7C19CybH.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>If we use as <code>git log --oneline</code> then, as shown in below image we can see all commit logs as just oneline value.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620738432457/6PzKDsWht.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>If we use as <code>git log -n</code> then, as shown in below image we can see commit logs with details, but for last n commits only.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620738564257/akF5TV7LD.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>If we use as <code>git log --oneline -n</code> then, as shown in below image we can see commit logs as just oneline value, but for just last n commits only.</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1620738738064/7AK1b_0Kc.png\" alt=\"Capture.PNG\" /></p>\n<p><strong>Note that</strong>, I have used simple one or two files to show all the examples with git commands, but we can also use this for as many files and folders we want to use.</p>\n<p>Also,  If you create new repo in GitHub then <code>branch name is main</code> not master.</p>\n<p><br /></p>\n<p>Thank you for reading, You can connect me on  <a target=\"_blank\" href=\"https://twitter.com/Its_SR__\">Twitter </a> /  <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajputsahil/\">LinkedIn </a> /  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223\">Github </a> .</p>\n","contentMarkdown":"Hello World !\n\nAlmost all developer now using [Version Control](https://en.wikipedia.org/wiki/Version_control)  to manage there source code.\n\n\n> Version control, also known as source control, is the practice of tracking and managing changes to software code.\n\n### Benefits of using version control \n\n- it manages a collection of changing and improving files.\n\n- complete history of project is tracked and available at any time.\n\n- helpful to collaborate in same project for all team members.\n\n- we can also easily test, fix or undo ideas and changes.\n\nTo get started with version control, you need to download and install git in your system. you can download git from  [this link](https://git-scm.com/).\n\n### Git\n\nGit is  [Distributed Version Control System](https://en.wikipedia.org/wiki/Distributed_version_control) .\n\n> Distributed Version Control System is a type of version control where the complete source code (codebase) including its full version history is available on every developer's computer.\n\n#### There is mainly three characteristics of DVCS(Distributed Version Control System)\n\n1. Each user has a local project history (repository).\n2. User can work offline. \n3. Can easily synchronize repository. \n\n#### Before getting started with git, there is some terminologies that we need to understand.\n\n- **Repository(Repo)** : A repository is a directory which contains your project work, as well as a few files which are used to communicate with Git. Repositories can exist either locally on your computer or as a remote copy on another computer.\n\n- **Local repository** : Local repository contains all of the commits that have been made for the projects in offline.\n\n- **Remote repository** : Remote repository usually located in a data center or cloud. This repo also contains all the commits of the project but in case of remote repo, commits are in online mode. This repo considered as a source of truth or official state of project. \n\n- **Commits** : A repository is made from commits. During commit, we save our project files or codes on particular moments and push to the repo. It's like checkpoint in gaming, which we can visit any time. Also, commits represents the version history of the project.\n\n- **Working Directory** : The Working Directory is the files that we see in our computer's file system.\n\n- **Staging area/index** : files that are planned for next commit.\n \n- **Checkout** : A checkout is when content in the repository has been copied to the Working Directory according to branch.\n\n- **Branch** : It's a new line of development, which is completely separate from main line of development.\n\nThis are some basic terms we should know before getting started with git.\n\nOnce, you download git and installed in your system you can open git bash terminal (which shows in below image)\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620706500013/rf4LpRcu4.png)\n \n\nNow, to use git we are going to use some commands. Which is helpful to configure git details, also maintaining repos, creating commits, push and pull source code etc.\n\n**git --version** : we can use this command to verify git version. for ex: `git --version`\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620711177322/awQ_O4rWT.png)\n\n**git help cmd** : we can use this command to get help for particular command in our default browser. for ex: `git help push`\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620711275558/z3UcLsbi4.png)\n\n**git cmd -h** : we can use this command to get help for particular command in cmd (terminal). for ex: `git  push -h`\n \n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620711353595/djvi_BNMz.png)\n\n**git config --global user.name \"YOUR NAME\"** : we can use this command to set default global username in our system which is going to display as author username in every commit. for ex: `git config --global user.name \"Sahil Rajput\"` \n\n**git config --global user.email \"YOUR EMAIL\"** : we can use this command to set default global email in our system which is going to display as author email in every commit. for ex: `git config --global user.email \"rajputsahil.2204@gmail.com\"`    \n\n**git config user.name** : we can use this command to see username for our system. for ex: `git config user.name` \n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620711487615/gL5TIz6sk.png)\n\n**git config user.email** : we can use this command to see email for our system. for ex: `git config user.email` \n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620711638876/FucRBuvOj.png)\n\n#### Now, let's get started with one example and learn about some more commands in git.\n\nFor this example, I'm going to use one of my git repo Located on  [this link](https://github.com/sahilrajput2223/git-test). \n\n**Note:** If you don't have GitHub account, then you can create from  [this link](http://github.com/) .\n\n### **git clone**\nUsing this command we can clone (make copy) of our remote repo in our system as a local repo.\n   for ex: `git clone https://github.com/sahilrajput2223/git-test.git`\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620710978374/4xQ49XwBC.png)\n\nWe can get clone URL from remote repo as shown in above image.\n\nTo clone remote repo into our system, we are going to use git clone command as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620712124863/lpr12Rvhw.png)\n\n\nNow, you can check that whole working tree (file structure) for that remote repo is created in your system. \n\nNow, let's create one basic notepad file named `HelloWorld.txt` and add that file in that local repo.\n\n### **git status**\n\nOnce, the file is created and added in local repo(working tree) we can use git status command to check the status of our repo files.\n\n- if we create new files and add it in working tree, then we can see the status of that files as a `untracked files` as shown in below image.\n    \n![c.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620712644195/jJkBnizbn.png)\n \n- if we delete files from working tree, then we can see the status of that files as `deleted` as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620712786617/wyTnRES5V.png)\n\n- if we added our new file in staging area, than we can see the status of that files as `new file` as shown in below image.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620712934497/9MfV94BCJ.png)\n \n- if we modify our file which is already added in staging area, then we can see the status of that files as `modified` as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620713165880/xjeDr31VX.png)\n\nAlso we can use `git status` command as a `git status -s`. which shows us the result in short form.\n\n\n### **git add**\n\nThis command is used to add files and folders in staging area from working tree. We can use this command as `git add <folder/file name>` or `git add .`. \n\n**git add folder/file_name** : this is useful when we want to add particular file/folder in staging area. we can use this command as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620713456552/LjSBd9nFf.png)\n\n**git add .** : this is useful when we want to add all the files/folders in staging area. we can use this command as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620713587812/tvNpqzizw.png)\n\nFiles and folders which are added in staging area/index is going to be add in our next commit.\n\n\n### **git commit**\n\nWe can use this command to add all the files/folders from staging area to local repo as a commit.\n\nThis command is used as `git commit -m \"COMMIT MESSAGE\"`\n\nhere, `-m` flag is used to add commit massage. If we don't use this flag then default IDE will open and we need to add commit message over there. \n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620714357923/rpJZWxuuR.png)\n\nAs shown in above image, we can commit our `HelloWorld.txt` file to local repo and commit message for this commit is `HelloWorld File added`.\n\n### **git push**\n\nWe can use this command to commits from local repository to remote repository.\n\nThis command is used as `git push <repo> <branch name>` as shown in below image.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620715322850/V86gsS5IW.png)\n\nhere, origin is used to store remote repo URL and branch name can be anything that we have created or by default branch name (master/main).\n\n### **git remote**\n\nWe can use this command to get information of remote repo.\n\nThis command is used as `git remote` or `git remote -v`.\n\n**git remote** : with the help of this command, we can see the shorthand name for the remote repository that a project was originally cloned from.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620716033130/chtLGYHU_.png)\n\n**git remote -v** : with the help of this command, we can see the shorthand name for the remote repository with original remote repo clone URL.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620716277234/8UD1vwej_.png)\n\n\n### **git pull**\n\nWe can use this command to pull all remote repo content into local repo.\n\nWhenever multiple contributors pushing content on remote repo then we need to pull all that content in local repo. So our local repo and remote repo is work in synchronized manner.\n\n- if there is no new commit in remote repo and our local repo is synchronized with remote repo then we can see the output as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620716704525/D3e0ZRqZh.png)\n  \n- if there is some new commit in remote repo and our local repo is not synchronized with remote repo then we can see the output as shown in below image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620716901577/nKIGB5W7i.png)\n\n\n### **git branch**\n\nWe can use this command to view all branch which is available in our repo. Also currently active branch noted with `*` sign.\n \n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620720012530/wsDAv24Uj.png)\n\nRight now, there is only one branch(master) available in this repo.\n\nWe can use this command as `git branch <BRANCH NAME>`.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620720247553/o7wM8th1i.png)\n\nAs mentioned in above image, we have created new branch called `development`. We can check that by displaying all branches in repo.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620720370562/JXJrlSniQ.png)\n\nNow, in above image you can see there is two branch available `master` and `development`. Also you can see that master branch is noted with `*`, because master branch is active branch.\n\n### **git checkout <BRANCH NAME>**\n\nWe can use this command to change our active branch. Once we will change our active branch, according to that branch our working tree content is also updated.\n\nRemember, we have created `development` branch, let's make that branch as our active branch.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620720753485/C7R_9eSsQ.png)\n\nNow, If we use `git branch` then we can see that our active branch is `development` and `*` is moved to development branch. you can see this in below mention image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620721063606/x5tfFXxQ9.png)\n\nWe can also use this command as `git checkout -b <BRANCH NAME>`, you can see this in below mention image.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620721201263/aQaTClJWI.png)\n\nhere, `-b` flag is used to create new branch and because of this using only this one command `git checkout -b <BRANCH NAME>` we can create new branch and immediately make it as a active branch. Using this we have `created testing branch and make it as active branch`. \n\n\n### **git log**\n\nWe can use this command to see commit log history.\n\nWe can use this command as `git log`, `git log --oneline`, `git log -n` and `git log --oneline -n`.\n\n- If we use as `git log` then, as shown in below image we can see all commit logs with all details.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620738292735/y7C19CybH.png)\n\n- If we use as `git log --oneline` then, as shown in below image we can see all commit logs as just oneline value.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620738432457/6PzKDsWht.png)\n\n- If we use as `git log -n` then, as shown in below image we can see commit logs with details, but for last n commits only.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620738564257/akF5TV7LD.png)\n\n- If we use as `git log --oneline -n` then, as shown in below image we can see commit logs as just oneline value, but for just last n commits only.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1620738738064/7AK1b_0Kc.png)\n\n\n**Note that**, I have used simple one or two files to show all the examples with git commands, but we can also use this for as many files and folders we want to use.\n\nAlso,  If you create new repo in GitHub then `branch name is main` not master.\n\n\n<br>\n\nThank you for reading, You can connect me on  [Twitter ](https://twitter.com/Its_SR__) /  [LinkedIn ](https://www.linkedin.com/in/rajputsahil/) /  [Github ](https://github.com/sahilrajput2223) .\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94c63","56744723958ef13879b9526c","56744722958ef13879b9506b","56744723958ef13879b954c1","56744721958ef13879b94ae7"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4705.1113,"responses":[{"popularity":4722.7017,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"60a6a06a2e1f1952ea820271","content":"<p>Nice Blog was very Useful &amp; Simple to Understand Thank You!:)</p>\n","contentMarkdown":"Nice Blog was very Useful & Simple to Understand Thank You!:)","author":"60a69f77fa38fa530ce2ec08","stamp":"ckox6qzgq00iodms111mj793t","post":"609a8c585a2dfa679dc79041","replies":[],"dateAdded":"2021-05-20T17:46:18.507Z","badgesAwarded":[],"__v":0},{"popularity":4706.4653,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"609b7a5bc798bd79ff8ecd40","content":"<p>Well explained</p>\n","contentMarkdown":"Well explained","author":"609b79e4c798bd79ff8ecd1b","stamp":"ckol3quhm04pp3js16msrgyif","post":"609a8c585a2dfa679dc79041","replies":[],"dateAdded":"2021-05-12T06:48:59.099Z","badgesAwarded":[],"__v":0}],"responseCount":2,"replyCount":1,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"_id":"609a8c585a2dfa679dc79041","title":"Getting Started with Git","subtitle":"","type":"story","ogImage":"","metaTitle":"Version control learning using git and github.","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"5fc9d62fdf0f3764e3df029d","slug":"getting-started-with-git","importedFromMedium":false,"dateAdded":"2021-05-11T13:53:28.032Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[{"_id":"60a6a06a2e1f1952ea820272","user":"60a69f77fa38fa530ce2ec08","stamp":"ckox6qzgq00iodms111mj793t"},{"_id":"609b7a5bc798bd79ff8ecd41","user":"609b79e4c798bd79ff8ecd1b","stamp":"ckol3quhm04pp3js16msrgyif"}],"cuid":"ckok3gvuf00hggts19c0nhhfc","author":"5fc9d58fdf0f3764e3df0294","followersCount":1,"draft":"6099fcb01ea29f2c341e3dff","hasPinnedTag":false,"readTime":9,"__v":2,"lastActivity":"2021-05-20T17:46:18.553Z","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"609a8c585a2dfa679dc79041"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"isAnonymous":false,"views":42,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1619643005307/U8q7K-R99.jpeg","autoGeneratedCover":"","brief":"Anyone can feel this song, or it’s just me ? 😅\n\nGive me some sunshine,\nGive me some rain,\nGive me another chance,\nI wanna grow up once again. — from 3-idiots\n\nThere are so many things going on any every person’s life. During that time anyone can hav...","content":"<p>Anyone can feel this song, or it’s just me ? 😅</p>\n<blockquote>\n<p>Give me some sunshine,\nGive me some rain,\nGive me another chance,\nI wanna grow up once again. — from 3-idiots</p>\n</blockquote>\n<p>There are so many things going on any every person’s life. During that time anyone can have issues which leads to self-doubt, low-confidence, <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Anxiety\">anxiety </a>and <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Depression_(mood\">depression</a>).</p>\n<h2 id=\"what-is-imposter-syndrome\">What is Imposter Syndrome ??</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/12000/0*GMQtH5iihrlZUW3G\" alt=\"Photo by [Norbert Kundrak](https://cdn.hashnode.com/res/hashnode/image/upload/v1619643001551/p4YNg-VbD.html) on [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)\" /></p>\n<p><strong><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Impostor_syndrome\">Impostor syndrome</a></strong> is a psychological pattern in which one doubts one’s accomplishments and has a persistent internalized fear of being exposed as a “fraud”.</p>\n<p>Anyone can feel this syndrome in their daily life.</p>\n<h3 id=\"characteristics\">Characteristics</h3>\n<p>Some of the common signs of imposter syndrome include:</p>\n<ul>\n<li><p>Self-doubt</p>\n</li>\n<li><p>fear of failure</p>\n</li>\n<li><p>Fear that you won’t live up to expectations</p>\n</li>\n<li><p>Overachieving</p>\n</li>\n<li><p>Sabotaging your own success</p>\n</li>\n<li><p>Self-doubt</p>\n</li>\n<li><p>Setting very challenging goals and feeling disappointed when you fall short</p>\n</li>\n</ul>\n<h2 id=\"two-side-of-imposter-syndrome\">Two side of imposter syndrome.</h2>\n<p><strong>First</strong>, as a lack of motivation. Person who feels this, have issues with self-doubt, low-confidence etc. Even though person know that he/she is more capable as compare to other in there respective field.</p>\n<p>Sometimes person also feel anxiety or depression related problems.</p>\n<p><strong>Second</strong>, as a fuel of motivation. This usually comes at a cost in the form of constant anxiety. Person keeps working on any given task or on particular topic to get things done, or understand that thing. Person might over-prepare or work much harder than necessary to make sure that everything is correct.</p>\n<p><strong>Ex-1</strong>: if anyone have a presentation tomorrow, then that person is worried about it and keeps practicing about it.</p>\n<p><strong>Ex-2</strong>: same thing goes with interview also. If anyone have interview then that person is also nervous about it, and if it’s first interview then that person is more worried about it.</p>\n<p>Sometime person who feels this, unable to sleep at night because of tension and anxiety. It’s whole vicious cycle which leads us to self-doubt, low-confidence, anxiety.</p>\n<blockquote>\n<p>Eventually, these feelings worsen anxiety and may lead to depression. People who experience impostor syndrome also tend not to talk about how they are feeling with anyone and struggle in silence, just as do those with <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Social_anxiety_disorder\">social anxiety disorder</a>.</p>\n</blockquote>\n<h2 id=\"identifying-imposter-syndrome\">Identifying imposter syndrome.</h2>\n<p>Impostor experience may be accompanied by <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Anxiety\">anxiety</a>, <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Stress\">stress</a>, <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Rumination\">rumination</a>, or <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Depression_(mood\">depression</a>).</p>\n<p>While impostor syndrome is not a recognized disorder in the <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/DSM-5\">Diagnostic and Statistical Manual of Mental Disorders (DSM-5)</a>. Studies suggest that more than 70% of people experience the impostor syndrome at some point in their lives.</p>\n<h2 id=\"5-different-types-of-imposter-syndrome\">5 Different Types of Imposter Syndrome.</h2>\n<p><strong>The Perfectionist:</strong> Perfectionists are never satisfied and always feel that their work could be better. Rather than focus on their strengths, they tries to fix their flaws or mistakes. This often leads to a great deal of self-pressure and high amounts of anxiety.</p>\n<p><strong>The Superhero</strong>: Superhero often push themselves to work harder and harder to measure up. But this is just a false cover-up for their insecurities, and the work overload may harm not only their own mental health, but also their relationships with others.</p>\n<p><strong>The Expert</strong>: Expert always try to learn something new and never satisfied with their level of knowledge and understanding. Even though they are highly skilled in their field, they underrate their own expertise.</p>\n<p><strong>The Natural Genius</strong>: Natural Genius set extensively high goal for themselves, and feels self-doubt when they don’t succeed on their first try.</p>\n<p><strong>The Soloist</strong>: Soloist prefer to work alone. They also rejects offer of assistance. THis type of people think that asking for help is sign of weakness or incompetence.</p>\n<h2 id=\"overcome-imposter-syndrome\">Overcome imposter syndrome.</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/12872/0*Q6VJdSifjGdrNNFc\" alt=\"Photo by [Terry Vlisidis](https://cdn.hashnode.com/res/hashnode/image/upload/v1619643003376/2l3kSmmkG.html) on [Unsplash](https://unsplash.com?utm_source=medium&amp;utm_medium=referral)\" />\nTo overcome your imposter syndrome,</p>\n<ul>\n<li><p>Share your feelings with other.</p>\n</li>\n<li><p>Focus on small task, don’t try to achieve every goal at same time.</p>\n</li>\n<li><p>Question your thoughts about does this things really matters to me or not.</p>\n</li>\n<li><p>Stop comparing yourself with others and try to focus on your work or life.</p>\n</li>\n<li><p>Use social media platforms as you are. Don’t try to pretend that you are different in real life and social media life.</p>\n</li>\n<li><p>Stop fighting for your feelings. If you have feelings express it.</p>\n</li>\n<li><p>No matter how much you feel like you don’t belong, don’t stop for archive your goal. “Never Give Up”</p>\n</li>\n<li><p>Do something that you like. for ex: singing, painting, dancing, traveling, listen music etc. This things helps you to gain your confidence.</p>\n</li>\n<li><p>Stay in contact with your family and friends.</p>\n</li>\n</ul>\n<p>Thank you for reading, You can connect me on  <a target=\"_blank\" href=\"https://twitter.com/Its_SR__\">Twitter</a>  /  <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajputsahil/\">LinkedIn</a>  /  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223\">Github</a> .</p>\n","contentMarkdown":"\n\nAnyone can feel this song, or it’s just me ? 😅\n> Give me some sunshine,\n> Give me some rain,\n> Give me another chance,\n> I wanna grow up once again. — from 3-idiots\n\nThere are so many things going on any every person’s life. During that time anyone can have issues which leads to self-doubt, low-confidence, [anxiety ](https://en.wikipedia.org/wiki/Anxiety)and [depression](https://en.wikipedia.org/wiki/Depression_(mood)).\n\n## What is Imposter Syndrome ??\n\n![Photo by [Norbert Kundrak](https://cdn.hashnode.com/res/hashnode/image/upload/v1619643001551/p4YNg-VbD.html) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)](https://cdn-images-1.medium.com/max/12000/0*GMQtH5iihrlZUW3G)\n\n**[Impostor syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome)** is a psychological pattern in which one doubts one’s accomplishments and has a persistent internalized fear of being exposed as a “fraud”.\n\nAnyone can feel this syndrome in their daily life.\n\n### Characteristics\n\nSome of the common signs of imposter syndrome include:\n\n* Self-doubt\n\n* fear of failure\n\n* Fear that you won’t live up to expectations\n\n* Overachieving\n\n* Sabotaging your own success\n\n* Self-doubt\n\n* Setting very challenging goals and feeling disappointed when you fall short\n\n## Two side of imposter syndrome.\n\n**First**, as a lack of motivation. Person who feels this, have issues with self-doubt, low-confidence etc. Even though person know that he/she is more capable as compare to other in there respective field.\n\nSometimes person also feel anxiety or depression related problems.\n\n**Second**, as a fuel of motivation. This usually comes at a cost in the form of constant anxiety. Person keeps working on any given task or on particular topic to get things done, or understand that thing. Person might over-prepare or work much harder than necessary to make sure that everything is correct.\n\n**Ex-1**: if anyone have a presentation tomorrow, then that person is worried about it and keeps practicing about it.\n\n**Ex-2**: same thing goes with interview also. If anyone have interview then that person is also nervous about it, and if it’s first interview then that person is more worried about it.\n\nSometime person who feels this, unable to sleep at night because of tension and anxiety. It’s whole vicious cycle which leads us to self-doubt, low-confidence, anxiety.\n> Eventually, these feelings worsen anxiety and may lead to depression. People who experience impostor syndrome also tend not to talk about how they are feeling with anyone and struggle in silence, just as do those with [social anxiety disorder](https://en.wikipedia.org/wiki/Social_anxiety_disorder).\n\n## Identifying imposter syndrome.\n\nImpostor experience may be accompanied by [anxiety](https://en.wikipedia.org/wiki/Anxiety), [stress](https://en.wikipedia.org/wiki/Stress), [rumination](https://en.wikipedia.org/wiki/Rumination), or [depression](https://en.wikipedia.org/wiki/Depression_(mood)).\n\nWhile impostor syndrome is not a recognized disorder in the [Diagnostic and Statistical Manual of Mental Disorders (DSM-5)](https://en.wikipedia.org/wiki/DSM-5). Studies suggest that more than 70% of people experience the impostor syndrome at some point in their lives.\n\n## 5 Different Types of Imposter Syndrome.\n\n**The Perfectionist:** Perfectionists are never satisfied and always feel that their work could be better. Rather than focus on their strengths, they tries to fix their flaws or mistakes. This often leads to a great deal of self-pressure and high amounts of anxiety.\n\n**The Superhero**: Superhero often push themselves to work harder and harder to measure up. But this is just a false cover-up for their insecurities, and the work overload may harm not only their own mental health, but also their relationships with others.\n\n**The Expert**: Expert always try to learn something new and never satisfied with their level of knowledge and understanding. Even though they are highly skilled in their field, they underrate their own expertise.\n\n**The Natural Genius**: Natural Genius set extensively high goal for themselves, and feels self-doubt when they don’t succeed on their first try.\n\n**The Soloist**: Soloist prefer to work alone. They also rejects offer of assistance. THis type of people think that asking for help is sign of weakness or incompetence.\n\n## Overcome imposter syndrome.\n\n![Photo by [Terry Vlisidis](https://cdn.hashnode.com/res/hashnode/image/upload/v1619643003376/2l3kSmmkG.html) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)](https://cdn-images-1.medium.com/max/12872/0*Q6VJdSifjGdrNNFc)\nTo overcome your imposter syndrome,\n\n* Share your feelings with other.\n\n* Focus on small task, don’t try to achieve every goal at same time.\n\n* Question your thoughts about does this things really matters to me or not.\n\n* Stop comparing yourself with others and try to focus on your work or life.\n\n* Use social media platforms as you are. Don’t try to pretend that you are different in real life and social media life.\n\n* Stop fighting for your feelings. If you have feelings express it.\n\n* No matter how much you feel like you don’t belong, don’t stop for archive your goal. “Never Give Up”\n\n* Do something that you like. for ex: singing, painting, dancing, traveling, listen music etc. This things helps you to gain your confidence.\n\n* Stay in contact with your family and friends.\n\n\n\nThank you for reading, You can connect me on  [Twitter](https://twitter.com/Its_SR__)  /  [LinkedIn](https://www.linkedin.com/in/rajputsahil/)  /  [Github](https://github.com/sahilrajput2223) .","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95306","5f2e55763b12e25afe3e4d05","56744723958ef13879b954c1","56744721958ef13879b948d1","5f7e39240e5d207780d949e9"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4093.1912,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"_id":"6089ca7f72387b583d149d6f","title":"Understand Your Mind","type":"story","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"5fc9d62fdf0f3764e3df029d","slug":"understand-your-mind-impostersyndrome-b480be7101fe","cuid":"cko1xmn1o04lbfhs16qzi00xs","importedFromMedium":true,"dateAdded":"2021-04-28T18:30:00.000Z","hasCustomDate":true,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"author":"5fc9d58fdf0f3764e3df0294","followersCount":1,"hasPinnedTag":false,"readTime":4,"__v":1,"series":null,"dateUpdated":"2021-04-28T20:59:08.690Z","pendingPublicationApproval":false,"subtitle":"","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6089ca7f72387b583d149d6f"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"isAnonymous":false,"views":134,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1616144895287/0kYgvims0.jpeg","autoGeneratedCover":"","brief":"Hello World !\nDuring this time, everyone wants to learn about python programming language, because python can be used in many section like web-development, Internet of things, networking, data science, machine learning, deep learning and AI.\nIn this ...","content":"<p>Hello World !</p>\n<p>During this time, everyone wants to learn about python programming language, because python can be used in many section like web-development, Internet of things, networking, data science, machine learning, deep learning and AI.</p>\n<p>In this blog, we will see how to develop basic Contact Directory web-app using Python-Django. </p>\n<p>Before that, make sure you have installed python in your system. to download and install python in your system you can follow this  <a target=\"_blank\" href=\"https://www.python.org/\">link</a> .</p>\n<p>Once you have python installed in your system you can follow along with this blog to develop Contact Directory web-app.</p>\n<p>We are going to use Virtual Environment concept here, so for that we need to install python virtual environment first.</p>\n<p>To install python virtual environment, we need to enter <code>pip install virtualenv</code> this command in cmd.</p>\n<p>After that we can create virtual environment for particular projects. for that we are going to use <code>virtualenv ContactDirectoryEnv</code> command. it will create ContactDirectoryEnv named virtual environment.</p>\n<p>Now, to activate that virtual environment we need to run activate.bat file which is located on <code>/ContactDirectoryEnv/Scripts/activate</code> path. After that virtual environment is activated and we are good to go to install django in virtual environment.</p>\n<p>To install latest version of Django, we need to run <code>python install django</code> command. it will  collect related packages and install django in virtual environment.</p>\n<p>To verify it's installed or not, we can use <code>pip list</code> command. we can see the version and packages details as displayed in below mention image.\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616131138929/k9_AVjUON.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, we need to create Python-Django project. For that we have to use <code>django-admin startproject ContactDirectory</code> command. here, <code>ContactDirectory</code> is project name.</p>\n<p>Till here, our basic project structure is created. Now we need to open this folder(project structure) in any IDE you like(I'm using PyCharm). In that IDE, you have to set project specific python interpreter as <code>/ContactDirectoryEnv/Scripts/python.exe</code>.</p>\n<p>Now, we need to make this changes to database also. We are using sqlite3 database here.\nFor that we need to use <code>python manage.py makemigrations</code> and <code>python manage.py migrate</code> command.</p>\n<p>With the help of <code>python manage.py makemigrations</code> command we will generate migrations which we need to apply on database and with the help of <code>python manage.py migrate</code> we will apply that migrations on database.  </p>\n<p>Once, all migrations applied successfully on database, we can see the following screen. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616132543638/iE06tTBMX.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, to run this python-django app we need to use <code>python manage.py runserver</code> command.\nAnd, if everything goes right and app is started, then we can see below mention messages in cmd.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616132715633/3ct__hOnG.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, in cmd we can see one link like (http://127.0.0.1:8000). using this link we can open our app in browser also. Once we hit that link, we can see below mention screen as result.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616132895493/noCsAnpix.png\" alt=\"Capture.PNG\" /></p>\n<p>Great, till now you have successfully started your python-django app. now further we are going to make changes in this app according to our Contact Directory web-app. </p>\n<p><strong>Take a little break and give yourself a cheer.</strong></p>\n<p>Once you open that project in any IDE, you can see there is some files like, settings, manage, urls and so on.</p>\n<p>First of all, we will start editing settings file.</p>\n<p>In settings file, there is one key named <code>TIME_ZONE</code>. we need to set that value as <code>TIME_ZONE ='Asia/kolkata'</code>. So, our app will use our timezone.</p>\n<p>Now, we need to create one app in which we are going to add our database, front-end, views and other urls related logic. for that we need to use <code>python manage.py startapp Home</code>. Here, <code>Home</code> is our app-name. </p>\n<p>After this, app named <code>Home</code> is created in that project structure. But we need to mention this newly created app in <code>INSTALLED_APPS</code> key in settings file so that our web-app knows that there is one app called <code>Home</code> created in this project. It will looks like below mention image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616134282727/G9CLsA4M2.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, we need to create one <code>Templates</code> folder in which we are going to add our html related codes. Also we need to mention this folder in settings file also (as displayed in below mention image).</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616134796380/oYhFt1_02.png\" alt=\"Capture.PNG\" /></p>\n<p>Now, we are going to do some changes in models file, which is located in Home app.</p>\n<p>In this file, we are going to add our database related logics like how we want to create out database tables and which types of column we are going to use. Add code in models file as displayed in below image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616136027450/aHVMdkg5l.png\" alt=\"Capture.PNG\" /></p>\n<p>Here, we are using five columns in database table to save contact details.</p>\n<ul>\n<li>Name: name column is used to add contact person name (having max value length 50 and unique value)</li>\n<li>Email: email column is used to add contact person email (having unique value)</li>\n<li>Contact Number: contactNumber is used to add contact number of person (having max value length 10 and unique value) </li>\n<li>Created At: used to store information as on which date data is created.</li>\n<li>Updated At: used to store information as on which date data is last modified.</li>\n</ul>\n<p>Now, we need to create new forms file in Home app, as we are going to use forms file with views, and urls file to generate out html page.</p>\n<p>To generate html from models file, we are going to use <code>django-crispy-forms</code>. We need to run <code>pip install django-crispy-forms</code> to install crispy forms in our python-django project.Also we have to mention <code>crispy_forms</code> tag in <code>INSTALLED_APPS</code> section of settings file. </p>\n<p>Now, in forms file we need to add below mention code to generate forms form our database model.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616139638841/5e2GU7J0Y.png\" alt=\"forms.PNG\" /></p>\n<ul>\n<li>In forms file, we are mentioning our model using <code>model = 'model_name'</code> for which we want to create form.</li>\n<li>Also, we are adding that we want to use all fields from that model using <code>fields='__all__'</code> logic.</li>\n</ul>\n<p>Now, we need to add below mention logic in views file for our forms so that we can link our html page with database(models and forms) file logic.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616139763499/w5Cna17rg.png\" alt=\"views.PNG\" /></p>\n<ul>\n<li>In views file, we will check if the request is <code>POST</code> then we will validate that data and add that data in database.</li>\n<li>Also, if the request is not <code>POST</code> then empty form will generated and passed to addDetails(html page) page using <code>crispy forms</code> runtime render logic.</li>\n</ul>\n<p>Now, we have to create urls related file (named: urls_home) in Home app. This file is used to create url redirection logic in Home app.</p>\n<p>In urls_home, we need to mention below mention logic to make url redirection logic.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616141620354/dbd2NMnA7.png\" alt=\"urls.PNG\" /></p>\n<p>Now, we need to mention this urls_home file from Home app in main urls file which is available in main structure (ContactDirectory/urls) as displayed in below mention image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616141886095/_UQ5_OU_U.png\" alt=\"urls.PNG\" /></p>\n<p>Now, we need to make migrations and apply that migrations to database so that created model in models file is created in database.</p>\n<p>So, let's apply <code>python manage.py makemigrations</code> and then <code>python manage.py migrate</code> command.</p>\n<p>Once, all migrations applied successfully on database will see messages as mention in below image. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616142067421/XepgQVWvd.png\" alt=\"model.PNG\" /></p>\n<p>Now, let's run this using <code>python manage.py runserver</code> command.</p>\n<p>Once web-app is started, we have to open <code>http://127.0.0.1:8000/Home/AddDetails</code> url so that we can see add details related page(as displayed in image)</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616142298871/d3Wbn3Wvi.png\" alt=\"Capture.PNG\" /></p>\n<ul>\n<li>here, <code>http://127.0.0.1:8000</code> is our base-path, then <code>Home</code> is our app related path and at last <code>AddDetails</code> is our html related path.</li>\n</ul>\n<ul>\n<li>and, if we add details here and click on <code>Add</code> button then it will add that data in database.</li>\n</ul>\n<p>At database side, data is added like displayed in below mention image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1616142742928/a9dcd7Quy.png\" alt=\"db.PNG\" /></p>\n<p>Here, to open database file we need to use some database tool (I'm using  <a target=\"_blank\" href=\"https://sqlitebrowser.org/\">sqlitebrowser</a>).</p>\n<p>Django Official Documentation  <a target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.1/\">link</a> . </p>\n<p>we have seen,</p>\n<ul>\n<li>How to install and add Virtual Environment in system.</li>\n<li>How to activate Virtual Environment.</li>\n<li>How to install Django and crispy_forms in Virtual Environment.</li>\n<li>How to create basic app and run it, after applying all the migrations.</li>\n<li>How to create internal app and create models, views, forms and html related files.</li>\n<li>Also, how to add data in database using crispy forms logic.</li>\n</ul>\n<p>Thank you for reading, You can connect me on  <a target=\"_blank\" href=\"https://twitter.com/Its_SR__\">Twitter</a>   /  <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajputsahil/\">LinkedIn </a> /  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223\">Github </a> .</p>\n","contentMarkdown":"Hello World !\n\nDuring this time, everyone wants to learn about python programming language, because python can be used in many section like web-development, Internet of things, networking, data science, machine learning, deep learning and AI.\n\nIn this blog, we will see how to develop basic Contact Directory web-app using Python-Django. \n\nBefore that, make sure you have installed python in your system. to download and install python in your system you can follow this  [link](https://www.python.org/) .\n\nOnce you have python installed in your system you can follow along with this blog to develop Contact Directory web-app.\n\nWe are going to use Virtual Environment concept here, so for that we need to install python virtual environment first.\n\nTo install python virtual environment, we need to enter `pip install virtualenv` this command in cmd.\n\nAfter that we can create virtual environment for particular projects. for that we are going to use `virtualenv ContactDirectoryEnv` command. it will create ContactDirectoryEnv named virtual environment.\n\n\nNow, to activate that virtual environment we need to run activate.bat file which is located on `/ContactDirectoryEnv/Scripts/activate` path. After that virtual environment is activated and we are good to go to install django in virtual environment.\n\nTo install latest version of Django, we need to run `python install django` command. it will  collect related packages and install django in virtual environment.\n\nTo verify it's installed or not, we can use `pip list` command. we can see the version and packages details as displayed in below mention image.\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616131138929/k9_AVjUON.png)\n\nNow, we need to create Python-Django project. For that we have to use `django-admin startproject ContactDirectory` command. here, `ContactDirectory` is project name.\n\nTill here, our basic project structure is created. Now we need to open this folder(project structure) in any IDE you like(I'm using PyCharm). In that IDE, you have to set project specific python interpreter as `/ContactDirectoryEnv/Scripts/python.exe`.\n\nNow, we need to make this changes to database also. We are using sqlite3 database here.\nFor that we need to use `python manage.py makemigrations` and `python manage.py migrate` command.\n\nWith the help of `python manage.py makemigrations` command we will generate migrations which we need to apply on database and with the help of `python manage.py migrate` we will apply that migrations on database.  \n\nOnce, all migrations applied successfully on database, we can see the following screen. \n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616132543638/iE06tTBMX.png)\n\nNow, to run this python-django app we need to use `python manage.py runserver` command.\nAnd, if everything goes right and app is started, then we can see below mention messages in cmd.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616132715633/3ct__hOnG.png)\n\nNow, in cmd we can see one link like (http://127.0.0.1:8000). using this link we can open our app in browser also. Once we hit that link, we can see below mention screen as result.\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616132895493/noCsAnpix.png)\n\nGreat, till now you have successfully started your python-django app. now further we are going to make changes in this app according to our Contact Directory web-app. \n\n**Take a little break and give yourself a cheer.**\n\nOnce you open that project in any IDE, you can see there is some files like, settings, manage, urls and so on.\n\nFirst of all, we will start editing settings file.\n\nIn settings file, there is one key named `TIME_ZONE`. we need to set that value as `TIME_ZONE ='Asia/kolkata'`. So, our app will use our timezone.\n\nNow, we need to create one app in which we are going to add our database, front-end, views and other urls related logic. for that we need to use `python manage.py startapp Home`. Here, `Home` is our app-name. \n\nAfter this, app named `Home` is created in that project structure. But we need to mention this newly created app in `INSTALLED_APPS` key in settings file so that our web-app knows that there is one app called `Home` created in this project. It will looks like below mention image.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616134282727/G9CLsA4M2.png)\n   \nNow, we need to create one `Templates` folder in which we are going to add our html related codes. Also we need to mention this folder in settings file also (as displayed in below mention image).\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616134796380/oYhFt1_02.png)\n \n\nNow, we are going to do some changes in models file, which is located in Home app.\n\nIn this file, we are going to add our database related logics like how we want to create out database tables and which types of column we are going to use. Add code in models file as displayed in below image.\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616136027450/aHVMdkg5l.png)\n\nHere, we are using five columns in database table to save contact details.\n\n- Name: name column is used to add contact person name (having max value length 50 and unique value)\n- Email: email column is used to add contact person email (having unique value)\n- Contact Number: contactNumber is used to add contact number of person (having max value length 10 and unique value) \n- Created At: used to store information as on which date data is created.\n- Updated At: used to store information as on which date data is last modified.\n\nNow, we need to create new forms file in Home app, as we are going to use forms file with views, and urls file to generate out html page.\n\nTo generate html from models file, we are going to use `django-crispy-forms`. We need to run `pip install django-crispy-forms` to install crispy forms in our python-django project.Also we have to mention `crispy_forms` tag in `INSTALLED_APPS` section of settings file. \n\nNow, in forms file we need to add below mention code to generate forms form our database model.\n\n\n![forms.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616139638841/5e2GU7J0Y.png)\n- In forms file, we are mentioning our model using `model = 'model_name'` for which we want to create form.\n- Also, we are adding that we want to use all fields from that model using `fields='__all__'` logic.\n \nNow, we need to add below mention logic in views file for our forms so that we can link our html page with database(models and forms) file logic.\n\n\n![views.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616139763499/w5Cna17rg.png)\n\n- In views file, we will check if the request is `POST` then we will validate that data and add that data in database.\n- Also, if the request is not `POST` then empty form will generated and passed to addDetails(html page) page using `crispy forms` runtime render logic.\n\nNow, we have to create urls related file (named: urls_home) in Home app. This file is used to create url redirection logic in Home app.\n\nIn urls_home, we need to mention below mention logic to make url redirection logic.\n\n![urls.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616141620354/dbd2NMnA7.png)\n\nNow, we need to mention this urls_home file from Home app in main urls file which is available in main structure (ContactDirectory/urls) as displayed in below mention image.\n\n\n![urls.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616141886095/_UQ5_OU_U.png)\n\n \nNow, we need to make migrations and apply that migrations to database so that created model in models file is created in database.\n\nSo, let's apply `python manage.py makemigrations` and then `python manage.py migrate` command.\n\nOnce, all migrations applied successfully on database will see messages as mention in below image. \n\n\n![model.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616142067421/XepgQVWvd.png)\n  \n\nNow, let's run this using `python manage.py runserver` command.\n\nOnce web-app is started, we have to open `http://127.0.0.1:8000/Home/AddDetails` url so that we can see add details related page(as displayed in image)\n\n\n![Capture.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616142298871/d3Wbn3Wvi.png)\n\n - here, `http://127.0.0.1:8000` is our base-path, then `Home` is our app related path and at last `AddDetails` is our html related path.\n\n- and, if we add details here and click on `Add` button then it will add that data in database.\n\nAt database side, data is added like displayed in below mention image.\n\n\n![db.PNG](https://cdn.hashnode.com/res/hashnode/image/upload/v1616142742928/a9dcd7Quy.png)\n\n\nHere, to open database file we need to use some database tool (I'm using  [sqlitebrowser](https://sqlitebrowser.org/)).\n\nDjango Official Documentation  [link](https://docs.djangoproject.com/en/3.1/) . \n\nwe have seen,\n\n- How to install and add Virtual Environment in system.\n- How to activate Virtual Environment.\n- How to install Django and crispy_forms in Virtual Environment.\n- How to create basic app and run it, after applying all the migrations.\n- How to create internal app and create models, views, forms and html related files.\n- Also, how to add data in database using crispy forms logic.\n\n\nThank you for reading, You can connect me on  [Twitter](https://twitter.com/Its_SR__)   /  [LinkedIn ](https://www.linkedin.com/in/rajputsahil/) /  [Github ](https://github.com/sahilrajput2223) .","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94d67","56744722958ef13879b94e81","56744723958ef13879b954c1","5f3867d1c4d5973f55c90b8b","5f76046e37eb052c1b80da9f"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4604.0896,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd"],"totalReactions":13,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"_id":"60546ad06b12fe1c2c11f774","title":"Python Django :: Let's Do It","subtitle":"","type":"story","ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1616144882381/x6mLMab0p.jpeg","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"5fc9d62fdf0f3764e3df029d","slug":"python-django-lets-do-it","importedFromMedium":false,"dateAdded":"2021-03-19T09:11:44.982Z","hasCustomDate":false,"stickCoverToBottom":true,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"ckmg32g1600s9kcs1hrwq7511","author":"5fc9d58fdf0f3764e3df0294","followersCount":1,"draft":"60542f11406fc615974315db","hasPinnedTag":false,"readTime":11,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_567453d0b73d6a82ac8c5ab9":1,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":1,"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d3548a":1,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_567453d0b73d6a82ac8c5abd":1},"uniqueReactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5ab9","5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35486","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548a","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":2,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_567453d0b73d6a82ac8c5ab9":1,"reaction_5c090d96c2a9c2a674d35485":2,"reaction_5c090d96c2a9c2a674d35486":1,"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d3548a":1,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_567453d0b73d6a82ac8c5abd":1},"id":"60546ad06b12fe1c2c11f774"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"isAnonymous":false,"views":71,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1609061061994/wnK0PaKey.jpeg","autoGeneratedCover":"","brief":"Hello world !\nDuring this time almost everyone is connected using APIs. Some of them are developing it, some consuming it in any way and some are developing and consuming both.\nAPIs give response using HTTP status codes and response body. With the he...","content":"<p>Hello world !</p>\n<p>During this time almost everyone is connected using APIs. Some of them are developing it, some consuming it in any way and some are developing and consuming both.</p>\n<p>APIs give response using HTTP status codes and response body. With the help of this status codes we can understand status of API output and get information about it.</p>\n<p>In this Blog, What is <strong>APIs and Different types of HTTP Status Codes</strong>.</p>\n<p><strong>Things covered in this blog,</strong></p>\n<pre><code><span class=\"hljs-number\">1.</span> Whats <span class=\"hljs-keyword\">is</span> APIs?\n<span class=\"hljs-number\">2.</span> Different <span class=\"hljs-keyword\">types</span> <span class=\"hljs-keyword\">of</span> HTTP Status Codes.\n</code></pre><p><strong>Let's get started with details,</strong></p>\n<p>What is APIs ?</p>\n<p>As per Definition, </p>\n<blockquote>\n<p>API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.</p>\n</blockquote>\n<p>There are two types of APIs.</p>\n<ol>\n<li>REST APIs</li>\n<li><p>SOAP APIs</p>\n<p><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST API</a>  (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for <code>representational state transfer</code>. It returns data to receiver in <code>json format</code>.</p>\n<p><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/SOAP\">SOAP</a>  stands for <code>Simple Object Access Protocol</code>. It's a messaging protocol for interchanging data in a decentralized and distributed environment. SOAP can work with any application layer protocol, such as HTTP, SMTP, TCP, or UDP. It returns data to the receiver in <code>XML format</code>.</p>\n</li>\n</ol>\n<h3 id=\"different-types-of-http-status-codes\">Different types of HTTP Status Codes</h3>\n<p>Status codes are issued by a server in response to a client's request made to the server. It includes codes from  <a target=\"_blank\" href=\"https://www.ietf.org/\">IETF</a> <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Request_for_Comments\">Request for Comments</a>  (RFCs), other specifications, and some additional codes used in some common applications of the HTTP.</p>\n<p>All HTTP response status codes are separated into five classes or categories. \nThe first digit of the status code defines the class of response, while the last two digits do not have any classifying or categorization role. </p>\n<ul>\n<li><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#1xx_informational_response\">1xx - Informational response</a>  </li>\n<li><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_success\">2xx - Successful</a>  </li>\n<li><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_redirection\">3xx - Redirection</a> </li>\n<li><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_client_errors\">4xx - Client error</a> </li>\n<li><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_server_errors\">5xx - Server error</a> </li>\n</ul>\n<h3 id=\"in-detail-for-1xx-information-response\">In detail for 1xx (Information response),</h3>\n<p>1xx means request received and continuing process.</p>\n<ul>\n<li><strong>100 (continue)</strong> - This response means everything is OK so far and client should continue the request, or ignore if the request already made.</li>\n</ul>\n<ul>\n<li><p><strong> 101 (Switching Protocol)</strong> - This code is sent in response to an Upgrade request header from the client, and indicates the protocol the server is switching to.</p>\n</li>\n<li><p><strong>102 (Processing)</strong> - This response indicates that server received request and processing this request, but no response is made to client or sender.</p>\n</li>\n<li><p><strong>103 (Early Hints)</strong> - This status code mostly used with  link headers, which can capable to let user preload resource while the server preparing the response.</p>\n</li>\n</ul>\n<h3 id=\"in-detail-for-2xx-successful\">In detail for 2xx (Successful),</h3>\n<p>2xx means request  was received by server, understood, and accepted.</p>\n<ul>\n<li><strong>200 (OK)</strong> - The request has succeeded. The meaning of the success depends on the HTTP method.</li>\n</ul>\n<ol>\n<li><code>GET</code> - The requested resource fetched successfully and transmitted in response body.</li>\n<li><code>POST</code> or <code>PUT</code> - The given resource in request is modified or added at server side.</li>\n<li><code>HEAD</code>  - The header resource fetched successfully and transmitted to client or receiver. </li>\n<li><code>TRACE</code> - The message body contains the request message as received by the server. </li>\n</ol>\n<ul>\n<li><p><strong>201 (Created)</strong> - The request has succeeded and new resource is created according to request. This response is sent to client after POST request, or sometime in PUT request.</p>\n</li>\n<li><p><strong>202 (Accepted)</strong> - The request is received but not yet acted upon. It is intended for cases where another process or server handling the request, or in case of batch processing.</p>\n</li>\n<li><p><strong>203 (Non-Authoritative Information)</strong> - This response code means the returned meta-information is not exactly same as available on origin server, but it's collected from a local or a third-party copy. Mostly used in mirrors and backup resources.</p>\n</li>\n<li><p><strong>204 (No Content)</strong> - This response code means, there is no content to send for any particular request, but header can be useful.</p>\n</li>\n<li><p><strong>205 (Reset Content)</strong> - This response code,  tells the user-agent(client) to reset the document which sent this request.</p>\n</li>\n<li><p><strong>206 (Partial Content)</strong> - This response code is used when the <code>Range</code> header is sent from user-agent to request only some part of a particular resource.   </p>\n</li>\n<li><p><strong>207 (Multi-Status)</strong> - This response code used when we need to convey information about multiple resources, where multiple status codes can be appropriate to use.</p>\n</li>\n<li><p><strong>208 (Already Reported)</strong> - Used inside a <code>&lt;dav:propstat&gt;</code> response element to avoid repeatedly enumerating the internal members of multiple bindings to the same collection</p>\n</li>\n<li><p><strong>226 (IM Used)</strong> - This response  code  means, the server has fulfilled a <code>GET</code> request for resource and the response is a collection or combination of the result of one or more instatus/manipulations applied to the current instance.</p>\n</li>\n</ul>\n<h3 id=\"in-detail-for-3xx-redirection\">In detail for 3xx (Redirection),</h3>\n<p>3xx means further action needs to be taken in order to complete the request.</p>\n<ul>\n<li><p><strong>300 (Multiple Choice)</strong> - This response code means, the request has more than one possible response and user-agent (client) needs to choose any one of them.</p>\n</li>\n<li><p><strong>301 (Moved Permanently)</strong> - This response code means, requested URL or resource is moved permanently on new location and new URL or resource location is given in response.</p>\n</li>\n<li><p><strong>302 (Found)</strong> - This response code means, the requested URL of resource has been moved temporarily. </p>\n</li>\n<li><p><strong>303 (See Other)</strong> - This  response code means, the server direct the client to get requested resource at another URI with GET request.</p>\n</li>\n<li><p><strong>304 (Not Modified)</strong> - This is used for catching purpose. This tells the client that response has not been modified, so the client can continues to use same cached version of response.  </p>\n</li>\n<li><p><strong>307 (Temporary Redirect)</strong> - The server sends this response to direct the user-agent to get the requested resource from some other URL without changing it's method.</p>\n</li>\n<li><p><strong>308 (Permanent Redirect)</strong> - This response code means, resource permanently located at new URL, which specified by <code>Location:</code> HTTP response header and same method used as used in previous request.  </p>\n</li>\n</ul>\n<h3 id=\"in-detail-for-4xx-client-error\">In detail for 4xx (Client error),</h3>\n<p>4xx means the request contains bad syntax or cannot be fulfilled.</p>\n<ul>\n<li><p><strong>400 (Bad Request)</strong> - The server could not understand the request due to invalid syntax.</p>\n</li>\n<li><p><strong>401 (Unauthorized)</strong> - This response code means, user needs to authenticate  itself to get/access requested information or response.</p>\n</li>\n<li><p><strong>402 (Payment Required)</strong> - This response code is reserved for future use. Initial aim for creating this code was using it in digital payment system, but this status  code is used very rarely and have no standard conventions exists.</p>\n</li>\n<li><p><strong>403 (Forbidden)</strong> - When client does not have rights to access to particular response or content, then server gives 403 status code as response. Unlike 401, the client's identity is known to server.</p>\n</li>\n<li><p><strong>404 (Not Found)</strong> - This response code means, server unable to find requested resource. Or in case of browser, this means the URL is not recognized or not correct.</p>\n</li>\n<li><p><strong>405 (Method Not Allowed)</strong> - The request method is known by server but it has been disabled for that endpoint/API and cannot be used. We can only use specified methods for particular endpoint/API. </p>\n</li>\n<li><p><strong>406 (Not Acceptable)</strong> - This response code means, web server unable to find any content that conforms to the criteria given by the user agent, after performing  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Content_negotiation#Server-driven\">server-driven content negotiation</a> . </p>\n</li>\n<li><p><strong>407 (Proxy Authentication Required)</strong> - This response code is similar to 401, but authentication is needed to be done by a PROXY.</p>\n</li>\n<li><p><strong>408 (Request Timeout)</strong> - This response code is sent on idle connection by some servers, even without any previous request by client. It means that server would like to shut down this unused connection. Also note that some servers shut down the connection without sending this message.</p>\n</li>\n<li><p><strong>409 (Conflict)</strong> - This response is sent to client when request conflicts with the current stats of the server.</p>\n</li>\n<li><p><strong>410 (Gone)</strong> - This response code means, requested resource is permanently deleted from server.</p>\n</li>\n<li><p><strong>411 (Length Required)</strong> - This response code means, server required <code>Content-Length</code> header and it's not present is client request.</p>\n</li>\n<li><p><strong>412 (Precondition Failed)</strong> - This response code means, client has indicated some preconditions in its headers which the server does not meet.</p>\n</li>\n<li><p><strong>413 (Payload Too Large)</strong> - This response code means, request entity is larger than limits defined by server. The server might close the connection or return an <code>Retry-After</code> header field.</p>\n</li>\n<li><p><strong>414 (URI Too Long)</strong> - This response code means, the URI requested by client is longer then server willing to interpret.</p>\n</li>\n<li><p><strong>415 (Unsupported Media Type)</strong> - The media format of the requested data is not supported by server, so the server rejected the request and give 415 response code.</p>\n</li>\n<li><p><strong>416 (Range Not Satisfiable)</strong> - When the range specified by the <code>Range</code> header field in the request can't be fulfilled.</p>\n</li>\n<li><p><strong>417 (Expectation Failed)</strong> - This response code means, the expectation made by the <code>Expect</code> request header field can't meet by the server.</p>\n</li>\n<li><p><strong>418 (I'm a teapot)</strong> - The server refuses the attempt to brew coffee with a teapot.  </p>\n</li>\n<li><p><strong>421 (Misdirected Request)</strong> - This response code means, request was directed at a server but the server is not able to produce a response because the server is not configured to produces response for that particular combination specified in requested URI. </p>\n</li>\n<li><p><strong>422 (Unprocessable Entity)</strong> - This response code means, the request was well-formed but it was unable to be followed due to semantic errors.</p>\n</li>\n<li><p><strong>423 (Locked)</strong> - This response code means, the requested resource is being being accessed is locked.</p>\n</li>\n<li><p><strong>424 (Failed Dependency)</strong> - This response code means, the request failed due to failure of a previous request.</p>\n</li>\n<li><p><strong>425 (Too Early)</strong> - This response code means, the server is unwilling to risk processing a request that might be replayed.</p>\n</li>\n<li><p><strong>426 (Upgrade Required)</strong> - When the server refuses the request with the current given protocol, but might willing to do so after the user-agent upgrades to different protocol. In this case server sends an <code>Upgrade</code> header in a 426 response to indicate required protocols.</p>\n</li>\n<li><p><strong>428 (Precondition Required)</strong> - When the origin server requires the request to be conditional.</p>\n</li>\n<li><p><strong>429 (Too Many Request)</strong> - When the user has sent too many requests in a given amount of time ( <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Rate_limiting\"><code>rate limiting</code></a>), then server sends 429 response code.</p>\n</li>\n<li><p><strong>431  (Request Header Fields Too Large)</strong> - When the server is unwilling to process the request because its header fields are too large for server. That time server send 431 response status code.</p>\n</li>\n<li><p><strong>451 (Unavailable For Legal Reasons)</strong> - This response code means, the requested resource cannot legally be provided, such as a web page censored by a government.  </p>\n</li>\n</ul>\n<h3 id=\"in-detail-for-5xx-server-error\">In detail for 5xx (Server error),</h3>\n<p>5xx means  the server failed to fulfil an apparently valid request.</p>\n<ul>\n<li><p><strong>500 (Internal Server Error)</strong> - This response code means, server has encountered a situation it doesn't know how to handle.</p>\n</li>\n<li><p><strong>501 (Not Implemented)</strong> - This response code means, the request method is not supported by the server and cannot be handled.</p>\n</li>\n<li><p><strong>502 (Bad Gateway)</strong> - This error response means, server while working as gateway to get a response needed to handle the request, got an invalid response.</p>\n</li>\n<li><p><strong>503 (Service Unavailable)</strong> - This response means, server is not ready to handle the request. Common cause are a server that is down for maintenance or server is overloaded.</p>\n</li>\n<li><p><strong>504 (Gateway Timeout)</strong> - This error response is given when the server is acting as a gateway and cannot get a response in time.</p>\n</li>\n<li><p><strong>505 (HTTP Version Not Supported)</strong> - This response code means, HTTP version defined in request is not supported by the server.</p>\n</li>\n<li><p><strong>506 (Variant Also Negotiates)</strong> - This response code indicates an internal server configuration error in which the chosen  variant is itself configured to engage in content negotiation, so is not a proper negotiation endpoint.</p>\n</li>\n<li><p><strong>507 (Insufficient Storages)</strong> - This response code means, the server unable to perform specified method on resource because server is unable to store the needed details to successfully complete the request.</p>\n</li>\n<li><p><strong>508 (Loop Detected)</strong> - When the server detected an infinite loop while processing the request, then server sends 508 response code to client.</p>\n</li>\n<li><p><strong>510 (Not Extended)</strong> - Further extensions to the request are required for the server to fulfil it.</p>\n</li>\n<li><p><strong>511 (Network Authentication Required)</strong> - This response code means, user-agent (client) needs to authenticate to gain network access.</p>\n</li>\n</ul>\n<p>Thank you for reading, You can connect me on  <a target=\"_blank\" href=\"https://twitter.com/sahil__2223\">Twitter</a>  /  <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajputsahil/\">LinkedIn </a> /  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223\">Github</a>  .</p>\n","contentMarkdown":"Hello world !\n\nDuring this time almost everyone is connected using APIs. Some of them are developing it, some consuming it in any way and some are developing and consuming both.\n\nAPIs give response using HTTP status codes and response body. With the help of this status codes we can understand status of API output and get information about it.\n\nIn this Blog, What is **APIs and Different types of HTTP Status Codes**.\n\n**Things covered in this blog,**\n\n```\n1. Whats is APIs?\n2. Different types of HTTP Status Codes.\n``` \n\n**Let's get started with details,**\n\nWhat is APIs ?\n\nAs per Definition, \n\n> API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.\n\n\nThere are two types of APIs.\n1. REST APIs\n2. SOAP APIs\n\n [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer)  (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for `representational state transfer`. It returns data to receiver in `json format`.\n\n [SOAP](https://en.wikipedia.org/wiki/SOAP)  stands for `Simple Object Access Protocol`. It's a messaging protocol for interchanging data in a decentralized and distributed environment. SOAP can work with any application layer protocol, such as HTTP, SMTP, TCP, or UDP. It returns data to the receiver in `XML format`.\n\n### Different types of HTTP Status Codes\n\nStatus codes are issued by a server in response to a client's request made to the server. It includes codes from  [IETF](https://www.ietf.org/) [Request for Comments](https://en.wikipedia.org/wiki/Request_for_Comments)  (RFCs), other specifications, and some additional codes used in some common applications of the HTTP.\n\nAll HTTP response status codes are separated into five classes or categories. \nThe first digit of the status code defines the class of response, while the last two digits do not have any classifying or categorization role. \n\n-  [1xx - Informational response](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#1xx_informational_response)  \n-  [2xx - Successful](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_success)  \n-  [3xx - Redirection](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_redirection) \n-  [4xx - Client error](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_client_errors) \n-  [5xx - Server error](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_server_errors) \n\n### In detail for 1xx (Information response),\n\n1xx means request received and continuing process.\n\n- **100 (continue)** - This response means everything is OK so far and client should continue the request, or ignore if the request already made.\n\n\n- ** 101 (Switching Protocol)** - This code is sent in response to an Upgrade request header from the client, and indicates the protocol the server is switching to.\n\n- **102 (Processing)** - This response indicates that server received request and processing this request, but no response is made to client or sender.\n\n- **103 (Early Hints)** - This status code mostly used with  link headers, which can capable to let user preload resource while the server preparing the response.\n\n### In detail for 2xx (Successful),\n\n2xx means request  was received by server, understood, and accepted.\n\n- **200 (OK)** - The request has succeeded. The meaning of the success depends on the HTTP method.\n\n\n1. `GET` - The requested resource fetched successfully and transmitted in response body.\n2. `POST` or `PUT` - The given resource in request is modified or added at server side.\n3.  `HEAD`  - The header resource fetched successfully and transmitted to client or receiver. \n4. `TRACE` - The message body contains the request message as received by the server. \n\n\n- **201 (Created)** - The request has succeeded and new resource is created according to request. This response is sent to client after POST request, or sometime in PUT request.\n\n- **202 (Accepted)** - The request is received but not yet acted upon. It is intended for cases where another process or server handling the request, or in case of batch processing.\n\n- **203 (Non-Authoritative Information)** - This response code means the returned meta-information is not exactly same as available on origin server, but it's collected from a local or a third-party copy. Mostly used in mirrors and backup resources.\n\n- **204 (No Content)** - This response code means, there is no content to send for any particular request, but header can be useful.\n\n- **205 (Reset Content)** - This response code,  tells the user-agent(client) to reset the document which sent this request.\n\n- **206 (Partial Content)** - This response code is used when the `Range` header is sent from user-agent to request only some part of a particular resource.   \n\n- **207 (Multi-Status)** - This response code used when we need to convey information about multiple resources, where multiple status codes can be appropriate to use.\n\n- **208 (Already Reported)** - Used inside a `<dav:propstat>` response element to avoid repeatedly enumerating the internal members of multiple bindings to the same collection\n\n- **226 (IM Used)** - This response  code  means, the server has fulfilled a `GET` request for resource and the response is a collection or combination of the result of one or more instatus/manipulations applied to the current instance.\n\n### In detail for 3xx (Redirection),\n\n3xx means further action needs to be taken in order to complete the request.\n\n- **300 (Multiple Choice)** - This response code means, the request has more than one possible response and user-agent (client) needs to choose any one of them.\n\n- **301 (Moved Permanently)** - This response code means, requested URL or resource is moved permanently on new location and new URL or resource location is given in response.\n\n- **302 (Found)** - This response code means, the requested URL of resource has been moved temporarily. \n\n- **303 (See Other)** - This  response code means, the server direct the client to get requested resource at another URI with GET request.\n\n- **304 (Not Modified)** - This is used for catching purpose. This tells the client that response has not been modified, so the client can continues to use same cached version of response.  \n\n- **307 (Temporary Redirect)** - The server sends this response to direct the user-agent to get the requested resource from some other URL without changing it's method.\n\n- **308 (Permanent Redirect)** - This response code means, resource permanently located at new URL, which specified by `Location:` HTTP response header and same method used as used in previous request.  \n\n### In detail for 4xx (Client error),\n\n4xx means the request contains bad syntax or cannot be fulfilled.\n\n- **400 (Bad Request)** - The server could not understand the request due to invalid syntax.\n\n- **401 (Unauthorized)** - This response code means, user needs to authenticate  itself to get/access requested information or response.\n\n- **402 (Payment Required)** - This response code is reserved for future use. Initial aim for creating this code was using it in digital payment system, but this status  code is used very rarely and have no standard conventions exists.\n\n- **403 (Forbidden)** - When client does not have rights to access to particular response or content, then server gives 403 status code as response. Unlike 401, the client's identity is known to server.\n\n- **404 (Not Found)** - This response code means, server unable to find requested resource. Or in case of browser, this means the URL is not recognized or not correct.\n\n- **405 (Method Not Allowed)** - The request method is known by server but it has been disabled for that endpoint/API and cannot be used. We can only use specified methods for particular endpoint/API. \n\n- **406 (Not Acceptable)** - This response code means, web server unable to find any content that conforms to the criteria given by the user agent, after performing  [server-driven content negotiation](https://en.wikipedia.org/wiki/Content_negotiation#Server-driven) . \n\n- **407 (Proxy Authentication Required)** - This response code is similar to 401, but authentication is needed to be done by a PROXY.\n\n- **408 (Request Timeout)** - This response code is sent on idle connection by some servers, even without any previous request by client. It means that server would like to shut down this unused connection. Also note that some servers shut down the connection without sending this message.\n\n- **409 (Conflict)** - This response is sent to client when request conflicts with the current stats of the server.\n\n- **410 (Gone)** - This response code means, requested resource is permanently deleted from server.\n\n- **411 (Length Required)** - This response code means, server required `Content-Length` header and it's not present is client request.\n\n- **412 (Precondition Failed)** - This response code means, client has indicated some preconditions in its headers which the server does not meet.\n\n- **413 (Payload Too Large)** - This response code means, request entity is larger than limits defined by server. The server might close the connection or return an `Retry-After` header field.\n\n- **414 (URI Too Long)** - This response code means, the URI requested by client is longer then server willing to interpret.\n\n- **415 (Unsupported Media Type)** - The media format of the requested data is not supported by server, so the server rejected the request and give 415 response code.\n\n- **416 (Range Not Satisfiable)** - When the range specified by the `Range` header field in the request can't be fulfilled.\n\n- **417 (Expectation Failed)** - This response code means, the expectation made by the `Expect` request header field can't meet by the server.\n\n- **418 (I'm a teapot)** - The server refuses the attempt to brew coffee with a teapot.  \n\n- **421 (Misdirected Request)** - This response code means, request was directed at a server but the server is not able to produce a response because the server is not configured to produces response for that particular combination specified in requested URI. \n\n- **422 (Unprocessable Entity)** - This response code means, the request was well-formed but it was unable to be followed due to semantic errors.\n\n- **423 (Locked)** - This response code means, the requested resource is being being accessed is locked.\n\n- **424 (Failed Dependency)** - This response code means, the request failed due to failure of a previous request.\n\n- **425 (Too Early)** - This response code means, the server is unwilling to risk processing a request that might be replayed.\n\n- **426 (Upgrade Required)** - When the server refuses the request with the current given protocol, but might willing to do so after the user-agent upgrades to different protocol. In this case server sends an `Upgrade` header in a 426 response to indicate required protocols.\n\n- **428 (Precondition Required)** - When the origin server requires the request to be conditional.\n\n- **429 (Too Many Request)** - When the user has sent too many requests in a given amount of time ( [`rate limiting`](https://en.wikipedia.org/wiki/Rate_limiting)), then server sends 429 response code.\n\n- **431  (Request Header Fields Too Large)** - When the server is unwilling to process the request because its header fields are too large for server. That time server send 431 response status code.\n\n- **451 (Unavailable For Legal Reasons)** - This response code means, the requested resource cannot legally be provided, such as a web page censored by a government.  \n\n### In detail for 5xx (Server error), \n\n5xx means  the server failed to fulfil an apparently valid request.\n\n- **500 (Internal Server Error)** - This response code means, server has encountered a situation it doesn't know how to handle.\n\n- **501 (Not Implemented)** - This response code means, the request method is not supported by the server and cannot be handled.\n\n- **502 (Bad Gateway)** - This error response means, server while working as gateway to get a response needed to handle the request, got an invalid response.\n\n- **503 (Service Unavailable)** - This response means, server is not ready to handle the request. Common cause are a server that is down for maintenance or server is overloaded.\n\n- **504 (Gateway Timeout)** - This error response is given when the server is acting as a gateway and cannot get a response in time.\n\n- **505 (HTTP Version Not Supported)** - This response code means, HTTP version defined in request is not supported by the server.\n\n- **506 (Variant Also Negotiates)** - This response code indicates an internal server configuration error in which the chosen  variant is itself configured to engage in content negotiation, so is not a proper negotiation endpoint.\n\n- **507 (Insufficient Storages)** - This response code means, the server unable to perform specified method on resource because server is unable to store the needed details to successfully complete the request.\n\n- **508 (Loop Detected)** - When the server detected an infinite loop while processing the request, then server sends 508 response code to client.\n\n- **510 (Not Extended)** - Further extensions to the request are required for the server to fulfil it.\n\n- **511 (Network Authentication Required)** - This response code means, user-agent (client) needs to authenticate to gain network access.\n\n\n\nThank you for reading, You can connect me on  [Twitter](https://twitter.com/sahil__2223)  /  [LinkedIn ](https://www.linkedin.com/in/rajputsahil/) /  [Github](https://github.com/sahilrajput2223)  .","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95245","56b1208d04f0061506b360ff","5f8dd8dffc30613d8cd9379a","56744721958ef13879b94c20","5fe187955620145ec6e3a5c2"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4445.5578,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["567453d0b73d6a82ac8c5abd"],"totalReactions":1,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"_id":"5fe853b3999b3f21e3158526","title":"APIs & Different types of HTTP Status Codes","type":"story","ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1609061070220/_L4f6IaGq.jpeg","partOfPublication":true,"publication":"5fc9d62fdf0f3764e3df029d","slug":"apis-and-different-types-of-http-status-codes","pollOptions":[],"dateAdded":"2020-12-27T09:28:19.538Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckj6xjws60cm2ozs13love8g0","author":"5fc9d58fdf0f3764e3df0294","followersCount":1,"draft":"5fe813836a146422083cddcd","isRepublished":false,"hasPinnedTag":false,"readTime":17,"__v":0,"series":null,"dateUpdated":"2020-12-27T09:30:58.662Z","pendingPublicationApproval":false,"reactionToCountMap":{"reaction_567453d0b73d6a82ac8c5abd":1},"uniqueReactions":["567453d0b73d6a82ac8c5abd"],"reactionToCountMapUnique":{"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5c090d96c2a9c2a674d35484":0},"id":"5fe853b3999b3f21e3158526"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"isAnonymous":false,"views":148,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1608382025458/-9ulu-awo.jpeg","autoGeneratedCover":"","brief":"Hello World !\nIn this virtual world,  IP address  helps in connecting our computer to other devices on our network in whole world and even in outer space.\nIn this blog article, we will learn about what is ip address and how to Find IP Address of any ...","content":"<p>Hello World !</p>\n<p>In this virtual world,  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/IP_address\">IP address </a> helps in connecting our computer to other devices on our network in whole world and even in outer space.</p>\n<p>In this blog article, we will learn about what is ip address and how to <strong>Find IP Address of any URL using Java</strong>.</p>\n<p><strong>Things covered in this Blog</strong></p>\n<pre><code><span class=\"hljs-number\">1.</span> What <span class=\"hljs-keyword\">is</span> IP Address ?\n<span class=\"hljs-number\">2.</span> How <span class=\"hljs-keyword\">to</span> find IP Address <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">any</span> URL <span class=\"hljs-keyword\">using</span> Java ?\n</code></pre><p>Let' get started with details,</p>\n<p><strong>What Is IP Address ?</strong></p>\n<p>As per definition, </p>\n<blockquote>\n<p>An Internet Protocol address (IP address) is a numerical label assigned to each device connected to a  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Computer_network\">computer network</a>  that uses the  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Internet_Protocol\">Internet Protocol</a>  for communication.</p>\n</blockquote>\n<p><strong>There is two type of IP Address,</strong></p>\n<ol>\n<li>IPV4</li>\n<li>IPV6</li>\n</ol>\n<p>In Internet Protocol version 4( <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/IPv4\">IPV4</a> ) protocol IP address define as a 32-bit number. But in case of IPV4 there is constrain on available IP addresses. So, new version of IP( <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/IPv6\">IPV6</a> ) was standardized in 1998. In case of IPV6 protocol IP address define as a 128-bit number. </p>\n<p>Example of IPV4 IP: <code>192.168.43.31</code></p>\n<p>Example of IPV6 IP: <code>2402:8100:39ae:5352:acba:7dba:6e8b:4d43</code></p>\n<p><strong>Time to do some Coding !</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1608378237974/Rz2MGmame.png\" alt=\"image.png\" /></p>\n<p>To fetch Hostname and IP address of URl we need to use two Java classes.</p>\n<pre><code><span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.net</span><span class=\"hljs-selector-class\">.InetAddress</span>;\n</code></pre><p>The InetAddress class represents an IP address, both IPv4 and IPv6. This class doesn’t have public constructors, so you create a new instance by using one of its factory methods and get your things done.</p>\n<pre><code><span class=\"hljs-selector-tag\">import</span> <span class=\"hljs-selector-tag\">java</span><span class=\"hljs-selector-class\">.net</span><span class=\"hljs-selector-class\">.URL</span>;\n</code></pre><p>The URL class is works as a gateway to any of the resource available on the internet. A Class URL represents a Uniform Resource Locator, which is a pointer to a <code>resource</code> in this virtual world.</p>\n<p>we can import both this class using java <code>import</code> keyword.</p>\n<p>after that, in line 9</p>\n<pre><code><span class=\"hljs-keyword\">String</span> url = <span class=\"hljs-string\">\"https://sahilrajput.hashnode.dev/\"</span>;\n</code></pre><p>we have to mention for which URL we want to find Hostname and IP address.</p>\n<p>then, in line 13</p>\n<pre><code>InetAddress ip = InetAddress.getByName(<span class=\"hljs-built_in\">new</span> URL(url).getHost());\n</code></pre><p>using URL class, url instance from the String representation generated and with the help of factory method of InetAddress we can find hostname and ip of that url.</p>\n<p>for that we need to use <code>InetAddress.getByName()</code> factory method.</p>\n<p>then, in line 15</p>\n<pre><code> <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"Hostname/IP address : \" + ip);\n</code></pre><p>Hostname and IP address is displayed on screen.</p>\n<p><strong>output is,</strong></p>\n<pre><code><span class=\"hljs-attribute\">Hostname</span>/IP address : sahilrajput.hashnode.dev/<span class=\"hljs-number\">139.59.77.163</span>\n</code></pre><p>using this steps you can find hostname and IP address of any url using Java.</p>\n<p>Thank you for reading, You can connect me on  <a target=\"_blank\" href=\"https://twitter.com/sahil__2223\">Twitter</a>  /  <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajputsahil/\">LinkedIn</a>  /  <a target=\"_blank\" href=\"https://github.com/sahilrajput2223\">Github</a> .</p>\n","contentMarkdown":"Hello World !\n\nIn this virtual world,  [IP address ](https://en.wikipedia.org/wiki/IP_address) helps in connecting our computer to other devices on our network in whole world and even in outer space.\n\nIn this blog article, we will learn about what is ip address and how to **Find IP Address of any URL using Java**.\n\n\n**Things covered in this Blog**\n```\n1. What is IP Address ?\n2. How to find IP Address of any URL using Java ?\n``` \n\nLet' get started with details,\n\n**What Is IP Address ?**\n\nAs per definition, \n\n\n> An Internet Protocol address (IP address) is a numerical label assigned to each device connected to a  [computer network](https://en.wikipedia.org/wiki/Computer_network)  that uses the  [Internet Protocol](https://en.wikipedia.org/wiki/Internet_Protocol)  for communication.\n\n**There is two type of IP Address,**\n\n1.  IPV4\n2. IPV6\n\nIn Internet Protocol version 4( [IPV4](https://en.wikipedia.org/wiki/IPv4) ) protocol IP address define as a 32-bit number. But in case of IPV4 there is constrain on available IP addresses. So, new version of IP( [IPV6](https://en.wikipedia.org/wiki/IPv6) ) was standardized in 1998. In case of IPV6 protocol IP address define as a 128-bit number. \n\nExample of IPV4 IP: `192.168.43.31`\n\nExample of IPV6 IP: `2402:8100:39ae:5352:acba:7dba:6e8b:4d43`\n\n**Time to do some Coding !**\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1608378237974/Rz2MGmame.png)\n\nTo fetch Hostname and IP address of URl we need to use two Java classes.\n\n```\nimport java.net.InetAddress;\n``` \nThe InetAddress class represents an IP address, both IPv4 and IPv6. This class doesn’t have public constructors, so you create a new instance by using one of its factory methods and get your things done.\n\n```\nimport java.net.URL;\n``` \nThe URL class is works as a gateway to any of the resource available on the internet. A Class URL represents a Uniform Resource Locator, which is a pointer to a `resource` in this virtual world.\n\nwe can import both this class using java `import` keyword.\n\nafter that, in line 9\n\n```\nString url = \"https://sahilrajput.hashnode.dev/\";\t\n``` \nwe have to mention for which URL we want to find Hostname and IP address.\n\nthen, in line 13\n\n```\nInetAddress ip = InetAddress.getByName(new URL(url).getHost());\n``` \nusing URL class, url instance from the String representation generated and with the help of factory method of InetAddress we can find hostname and ip of that url.\n\nfor that we need to use `InetAddress.getByName()` factory method.\n\nthen, in line 15\n```\n System.out.println(\"Hostname/IP address : \" + ip);\n``` \nHostname and IP address is displayed on screen.\n\n**output is,**\n\n```\nHostname/IP address : sahilrajput.hashnode.dev/139.59.77.163\n``` \nusing this steps you can find hostname and IP address of any url using Java.\n\nThank you for reading, You can connect me on  [Twitter](https://twitter.com/sahil__2223)  /  [LinkedIn](https://www.linkedin.com/in/rajputsahil/)  /  [Github](https://github.com/sahilrajput2223) .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94c9f","56ffbb5d5861692778050361","56744721958ef13879b94ae7","56ab1a78f28f9d9d99e3a6d1","5f08ee681981c53c4987f2b3"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4431.2138,"responses":[{"popularity":4430.8194,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"5fde34fa1485f22e24b35017","content":"<p>Yeah 👍!!\nKeep Going . . .</p>\n","contentMarkdown":"Yeah 👍!!\nKeep Going . . .","author":"5fbd49e1ec43af1ba6095085","stamp":"ckivyop4r0la544s1a3vec96d","post":"5fddf185b78ac62dff80c6af","replies":[],"dateAdded":"2020-12-19T17:14:34.685Z","badgesAwarded":[],"__v":0}],"responseCount":1,"replyCount":1,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485"],"totalReactions":6,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"_id":"5fddf185b78ac62dff80c6af","title":"Find IP Address of any URL using Java","type":"story","partOfPublication":true,"publication":"5fc9d62fdf0f3764e3df029d","slug":"find-ip-address-of-any-url-using-java","pollOptions":[],"dateAdded":"2020-12-19T12:26:45.970Z","badges":[],"questionReplies":[],"contributors":[{"_id":"5fde34fa1485f22e24b35018","user":"5fbd49e1ec43af1ba6095085","stamp":"ckivyop4r0la544s1a3vec96d"}],"cuid":"ckivoeklr0k4n33s1gor8f0qo","author":"5fc9d58fdf0f3764e3df0294","followersCount":1,"draft":"5fddc5061485f22e24b34784","isRepublished":false,"hasPinnedTag":false,"readTime":4,"__v":1,"series":null,"dateUpdated":"2020-12-19T12:50:13.697Z","pendingPublicationApproval":false,"ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1608382193237/YYlZXO6iu.jpeg","reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":5,"reaction_5c090d96c2a9c2a674d35485":1},"lastActivity":"2020-12-20T04:23:01.201Z","uniqueReactions":["5c090d96c2a9c2a674d35484","5c090d96c2a9c2a674d35485"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":5,"reaction_5c090d96c2a9c2a674d35485":1},"id":"5fddf185b78ac62dff80c6af"}]}